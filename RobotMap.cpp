// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::drivetrainLeftside = NULL;
SpeedController* RobotMap::drivetrainRightside = NULL;
RobotDrive* RobotMap::drivetrainRobotDrive = NULL;
Gyro* RobotMap::drivetrainDrivetrainGyro = NULL;
SpeedController* RobotMap::drivetrainDrivetrainPIDOutput = NULL;
PIDController* RobotMap::drivetrainDrivetrainPIDController = NULL;
DigitalInput* RobotMap::linetrackerOpticalsensor = NULL;
Gyro* RobotMap::orientationGyro = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	drivetrainLeftside = new Victor(1, 1);
	lw->AddActuator("Drivetrain", "Left side", (Victor*) drivetrainLeftside);
	
	drivetrainRightside = new Victor(1, 2);
	lw->AddActuator("Drivetrain", "Right side", (Victor*) drivetrainRightside);
	
	drivetrainRobotDrive = new RobotDrive(drivetrainLeftside, drivetrainRightside);
	
	drivetrainRobotDrive->SetSafetyEnabled(false);
        drivetrainRobotDrive->SetExpiration(0.1);
        drivetrainRobotDrive->SetSensitivity(0.5);
        drivetrainRobotDrive->SetMaxOutput(1.0);
        
	drivetrainDrivetrainGyro = new Gyro(1, 2);
	lw->AddSensor("Drivetrain", "Drivetrain Gyro", drivetrainDrivetrainGyro);
	drivetrainDrivetrainGyro->SetSensitivity(1.25);
	drivetrainDrivetrainPIDOutput = new Victor(1, 3);
	lw->AddActuator("Drivetrain", "Drivetrain PID Output", (Victor*) drivetrainDrivetrainPIDOutput);
	
	drivetrainDrivetrainPIDController = new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ drivetrainDrivetrainGyro, drivetrainDrivetrainPIDOutput, 0.02);
	lw->AddActuator("Drivetrain", "Drivetrain PID Controller", drivetrainDrivetrainPIDController);
	drivetrainDrivetrainPIDController->SetContinuous(false); drivetrainDrivetrainPIDController->SetAbsoluteTolerance(0.2); 
        drivetrainDrivetrainPIDController->SetOutputRange(-1.0, 1.0);
	linetrackerOpticalsensor = new DigitalInput(1, 1);
	lw->AddSensor("Linetracker", "Optical sensor", linetrackerOpticalsensor);
	
	orientationGyro = new Gyro(1, 1);
	lw->AddSensor("Orientation", "Gyro", orientationGyro);
	orientationGyro->SetSensitivity(1.25);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
