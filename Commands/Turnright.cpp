// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Turnright.h"

#define P       0.05f
#define I       0.0f
#define D       0.0f

Turnright::Turnright() 
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
   Requires(Robot::drivetrain);
   Requires(Robot::orientation);
   
   // initialize PID controller
   PIDcontroller = new PIDController(P, I, D, Robot::orientation->gyro, Robot::drivetrain);
   
   // Note: There is no range of the input because there is no min/max range of the gyro.
   // and setting the range of the output is unnesscesary because it defaults to -1 to 1.
   
   // set the turn tolerance
   // Note: cannot use SetTolerance because the min and max of the input have not been set.
   // must instead use set abs tolerance which takes a distance as it parameter
   PIDcontroller->SetAbsoluteTolerance(5.0f);
   
   // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
   // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void Turnright::Initialize()
{
   // read gyro angle
   startGyroAngle = Robot::orientation->gyro->GetAngle();
   
   // tell the PID controller to target angle
   PIDcontroller->SetSetpoint(startGyroAngle + 90.0f);

   // run the PID controller
   PIDcontroller->Enable();
}

// Called repeatedly when this Command is scheduled to run
void Turnright::Execute() 
{
   // do nothing since PID is running in its own thread
   
   // show the turn angle error
   SmartDashboard::PutNumber("PID Error", (double) PIDcontroller->GetError());
}

// Make this return true when this Command no longer needs to run execute()
bool Turnright::IsFinished() 
{
   // return true when on target
	return PIDcontroller->OnTarget();
}

// Called once after isFinished returns true
void Turnright::End() 
{
   // show the first and final angle
   
   
   // stop the PID 
	PIDcontroller->Disable();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Turnright::Interrupted() 
{
   // stop the PID 
   PIDcontroller->Disable();  
}
